//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    todolistPOST(body: CreateTodoListRequestModel): Promise<TodoListResponseModel> {
        let url_ = this.baseUrl + "/todolist";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTodolistPOST(_response);
        });
    }

    protected processTodolistPOST(response: Response): Promise<TodoListResponseModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TodoListResponseModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TodoListResponseModel>(null as any);
    }

    /**
     * @param includeDeleted (optional) 
     * @return OK
     */
    todolistGET(includeDeleted: boolean | undefined): Promise<TodoListCollectionResponseModel> {
        let url_ = this.baseUrl + "/todolist?";
        if (includeDeleted === null)
            throw new globalThis.Error("The parameter 'includeDeleted' cannot be null.");
        else if (includeDeleted !== undefined)
            url_ += "includeDeleted=" + encodeURIComponent("" + includeDeleted) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTodolistGET(_response);
        });
    }

    protected processTodolistGET(response: Response): Promise<TodoListCollectionResponseModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TodoListCollectionResponseModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TodoListCollectionResponseModel>(null as any);
    }

    /**
     * @return OK
     */
    todolistPUT(listid: number, body: UpdateTodoListRequestModel): Promise<TodoListResponseModel> {
        let url_ = this.baseUrl + "/todolist/{listid}";
        if (listid === undefined || listid === null)
            throw new globalThis.Error("The parameter 'listid' must be defined.");
        url_ = url_.replace("{listid}", encodeURIComponent("" + listid));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTodolistPUT(_response);
        });
    }

    protected processTodolistPUT(response: Response): Promise<TodoListResponseModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TodoListResponseModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TodoListResponseModel>(null as any);
    }

    /**
     * @return OK
     */
    todoitemPOST(todolistid: number, body: CreateTodoItemRequestModel): Promise<TodoItemResponseModel> {
        let url_ = this.baseUrl + "/todolist/{todolistid}/todoitem";
        if (todolistid === undefined || todolistid === null)
            throw new globalThis.Error("The parameter 'todolistid' must be defined.");
        url_ = url_.replace("{todolistid}", encodeURIComponent("" + todolistid));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTodoitemPOST(_response);
        });
    }

    protected processTodoitemPOST(response: Response): Promise<TodoItemResponseModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TodoItemResponseModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TodoItemResponseModel>(null as any);
    }

    /**
     * @param includeDeleted (optional) 
     * @param since (optional) 
     * @return OK
     */
    todoitems(todolistid: number, includeDeleted: boolean | undefined, since: Date | undefined): Promise<TodoItemCollectionResponseModel> {
        let url_ = this.baseUrl + "/todolist/{todolistid}/todoitems?";
        if (todolistid === undefined || todolistid === null)
            throw new globalThis.Error("The parameter 'todolistid' must be defined.");
        url_ = url_.replace("{todolistid}", encodeURIComponent("" + todolistid));
        if (includeDeleted === null)
            throw new globalThis.Error("The parameter 'includeDeleted' cannot be null.");
        else if (includeDeleted !== undefined)
            url_ += "includeDeleted=" + encodeURIComponent("" + includeDeleted) + "&";
        if (since === null)
            throw new globalThis.Error("The parameter 'since' cannot be null.");
        else if (since !== undefined)
            url_ += "since=" + encodeURIComponent(since ? "" + since.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTodoitems(_response);
        });
    }

    protected processTodoitems(response: Response): Promise<TodoItemCollectionResponseModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TodoItemCollectionResponseModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TodoItemCollectionResponseModel>(null as any);
    }

    /**
     * @return OK
     */
    todoitemPUT(todolistid: number, todoitemid: number, body: UpdateTodoItemRequestModel): Promise<TodoItemResponseModel> {
        let url_ = this.baseUrl + "/todolist/{todolistid}/todoitem/{todoitemid}";
        if (todolistid === undefined || todolistid === null)
            throw new globalThis.Error("The parameter 'todolistid' must be defined.");
        url_ = url_.replace("{todolistid}", encodeURIComponent("" + todolistid));
        if (todoitemid === undefined || todoitemid === null)
            throw new globalThis.Error("The parameter 'todoitemid' must be defined.");
        url_ = url_.replace("{todoitemid}", encodeURIComponent("" + todoitemid));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTodoitemPUT(_response);
        });
    }

    protected processTodoitemPUT(response: Response): Promise<TodoItemResponseModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TodoItemResponseModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TodoItemResponseModel>(null as any);
    }
}

export class CreateTodoItemRequestModel implements ICreateTodoItemRequestModel {
    title!: string;
    dueDate?: Date | undefined;

    constructor(data?: ICreateTodoItemRequestModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.dueDate = _data["dueDate"] ? new Date(_data["dueDate"].toString()) : undefined as any;
        }
    }

    static fromJS(data: any): CreateTodoItemRequestModel {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTodoItemRequestModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["dueDate"] = this.dueDate ? this.dueDate.toISOString() : undefined as any;
        return data;
    }
}

export interface ICreateTodoItemRequestModel {
    title: string;
    dueDate?: Date | undefined;
}

export class CreateTodoListRequestModel implements ICreateTodoListRequestModel {
    name!: string | undefined;
    ownerId?: string;

    constructor(data?: ICreateTodoListRequestModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.ownerId = _data["ownerId"];
        }
    }

    static fromJS(data: any): CreateTodoListRequestModel {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTodoListRequestModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["ownerId"] = this.ownerId;
        return data;
    }
}

export interface ICreateTodoListRequestModel {
    name: string | undefined;
    ownerId?: string;
}

export class TodoItemCollectionResponseModel implements ITodoItemCollectionResponseModel {
    items?: TodoItemResponseModel[] | undefined;
    totalCount?: number;
    lastSynced?: Date;

    constructor(data?: ITodoItemCollectionResponseModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(TodoItemResponseModel.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.lastSynced = _data["lastSynced"] ? new Date(_data["lastSynced"].toString()) : undefined as any;
        }
    }

    static fromJS(data: any): TodoItemCollectionResponseModel {
        data = typeof data === 'object' ? data : {};
        let result = new TodoItemCollectionResponseModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item ? item.toJSON() : undefined as any);
        }
        data["totalCount"] = this.totalCount;
        data["lastSynced"] = this.lastSynced ? this.lastSynced.toISOString() : undefined as any;
        return data;
    }
}

export interface ITodoItemCollectionResponseModel {
    items?: TodoItemResponseModel[] | undefined;
    totalCount?: number;
    lastSynced?: Date;
}

export class TodoItemResponseModel implements ITodoItemResponseModel {
    id?: number;
    todoListId?: number;
    title!: string | undefined;
    isCompleted?: boolean;
    isDeleted?: boolean;
    dueDate?: Date | undefined;
    createdDate?: Date;
    updatedDate?: Date;

    constructor(data?: ITodoItemResponseModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.todoListId = _data["todoListId"];
            this.title = _data["title"];
            this.isCompleted = _data["isCompleted"];
            this.isDeleted = _data["isDeleted"];
            this.dueDate = _data["dueDate"] ? new Date(_data["dueDate"].toString()) : undefined as any;
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : undefined as any;
            this.updatedDate = _data["updatedDate"] ? new Date(_data["updatedDate"].toString()) : undefined as any;
        }
    }

    static fromJS(data: any): TodoItemResponseModel {
        data = typeof data === 'object' ? data : {};
        let result = new TodoItemResponseModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["todoListId"] = this.todoListId;
        data["title"] = this.title;
        data["isCompleted"] = this.isCompleted;
        data["isDeleted"] = this.isDeleted;
        data["dueDate"] = this.dueDate ? this.dueDate.toISOString() : undefined as any;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : undefined as any;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : undefined as any;
        return data;
    }
}

export interface ITodoItemResponseModel {
    id?: number;
    todoListId?: number;
    title: string | undefined;
    isCompleted?: boolean;
    isDeleted?: boolean;
    dueDate?: Date | undefined;
    createdDate?: Date;
    updatedDate?: Date;
}

export class TodoListCollectionResponseModel implements ITodoListCollectionResponseModel {
    items?: TodoListResponseModel[] | undefined;
    totalCount?: number;
    lastSynced?: Date;

    constructor(data?: ITodoListCollectionResponseModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(TodoListResponseModel.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.lastSynced = _data["lastSynced"] ? new Date(_data["lastSynced"].toString()) : undefined as any;
        }
    }

    static fromJS(data: any): TodoListCollectionResponseModel {
        data = typeof data === 'object' ? data : {};
        let result = new TodoListCollectionResponseModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item ? item.toJSON() : undefined as any);
        }
        data["totalCount"] = this.totalCount;
        data["lastSynced"] = this.lastSynced ? this.lastSynced.toISOString() : undefined as any;
        return data;
    }
}

export interface ITodoListCollectionResponseModel {
    items?: TodoListResponseModel[] | undefined;
    totalCount?: number;
    lastSynced?: Date;
}

export class TodoListResponseModel implements ITodoListResponseModel {
    id?: number;
    name!: string | undefined;
    ownerId?: string;
    isDeleted?: boolean;
    createdDate?: Date;
    updatedDate?: Date;

    constructor(data?: ITodoListResponseModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.ownerId = _data["ownerId"];
            this.isDeleted = _data["isDeleted"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : undefined as any;
            this.updatedDate = _data["updatedDate"] ? new Date(_data["updatedDate"].toString()) : undefined as any;
        }
    }

    static fromJS(data: any): TodoListResponseModel {
        data = typeof data === 'object' ? data : {};
        let result = new TodoListResponseModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["ownerId"] = this.ownerId;
        data["isDeleted"] = this.isDeleted;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : undefined as any;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : undefined as any;
        return data;
    }
}

export interface ITodoListResponseModel {
    id?: number;
    name: string | undefined;
    ownerId?: string;
    isDeleted?: boolean;
    createdDate?: Date;
    updatedDate?: Date;
}

export class UpdateTodoItemRequestModel implements IUpdateTodoItemRequestModel {
    title?: string | undefined;
    isCompleted?: boolean | undefined;
    isDeleted?: boolean | undefined;
    dueDate?: Date | undefined;

    constructor(data?: IUpdateTodoItemRequestModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.isCompleted = _data["isCompleted"];
            this.isDeleted = _data["isDeleted"];
            this.dueDate = _data["dueDate"] ? new Date(_data["dueDate"].toString()) : undefined as any;
        }
    }

    static fromJS(data: any): UpdateTodoItemRequestModel {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTodoItemRequestModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["isCompleted"] = this.isCompleted;
        data["isDeleted"] = this.isDeleted;
        data["dueDate"] = this.dueDate ? this.dueDate.toISOString() : undefined as any;
        return data;
    }
}

export interface IUpdateTodoItemRequestModel {
    title?: string | undefined;
    isCompleted?: boolean | undefined;
    isDeleted?: boolean | undefined;
    dueDate?: Date | undefined;
}

export class UpdateTodoListRequestModel implements IUpdateTodoListRequestModel {
    name?: string | undefined;
    isDeleted?: boolean | undefined;

    constructor(data?: IUpdateTodoListRequestModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.isDeleted = _data["isDeleted"];
        }
    }

    static fromJS(data: any): UpdateTodoListRequestModel {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTodoListRequestModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["isDeleted"] = this.isDeleted;
        return data;
    }
}

export interface IUpdateTodoListRequestModel {
    name?: string | undefined;
    isDeleted?: boolean | undefined;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}